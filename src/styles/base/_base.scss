*,
*::after, /*making the after and before elements generated by the pseudo classes to get the behavior*/
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit; /*inherits from the body*/
} 

html {
    /*Defining the root font-size that the rem units will be relative of. This way we can make easier responsive design.*/
    /*font-size: 10px;*/ /*Now 1 rem = 10px*/

    /*However we shouldn't put a pixel unit once it's an absolute measure and we would be removing the user capability
      of setting a default font size in the browser(our 10px would overwrite it) so we have to put in percentage
      in order to be relative to the user's browser setting.
      Usually the default browser setting is 16 pixels so if we set 100% it would be 100% of 16 pixels
      But as we want 10 pixels for easier calculation we can set 62.5% of 16 pixels which is 10 pixels 
    */
    font-size: 62.5%; //1rem = 10 pixels // 10px/16px = 62.5%

    //Now instead of change pixel by pixel we can just change the font-size and the size of the elements will change accordingly
    @include respond(big-desktop) {
      font-size: 75%; //1rem = 12 pixels // 12px/16px = 75%
    }
    @include respond(tab-land) {
      font-size: 56.25%; //1rem = 9 pixels // 9px/16px = 56.25%
    }
    @include respond(tab-port) {
      font-size: 50%; //1rem = 8 pixels // 8px/16px = 50%
    }
    @include respond(phone) {
      font-size: 40%; //1rem = 8 pixels // 8px/16px = 50%
    }
}

body {
  padding: 3rem;
  box-sizing: border-box;

  @include respond(tab-port) {
    padding: 0;
  }
}

::selection {
  background-color: $color-primary;
  color: $color-white;
}